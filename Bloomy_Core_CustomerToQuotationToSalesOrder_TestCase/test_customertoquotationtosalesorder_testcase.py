from addons.compare_dates import CompareDates
from addons.generate_date_time_current_future_or_past_ import GenerateDateTimeCurrentFutureOrPast
from addons.random_data_generator import RandomDataGenerator
from addons.string_utils import StringUtils
from addons.visible_elements_operations import VisibleElementsOperations
from distutils.util import strtobool
from selenium.webdriver.common.by import By
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
from subtests import test_login
from subtests import test_logout
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: Bloomy_Core
    Package: TestProject.Generated.Tests.BloomyCore
    Test: CustomerToQuotationToSalesOrder_TestCase
    Generated by: Meenal Kardale (meenal.kardale@extrapreneurs-india.com)
    Generated on 06/30/2021, 10:49:40
"""


@pytest.fixture()
def driver():
    driver = webdriver.Chrome(token="3J0RNM_48lLt_KM5Ab6s6A_HZzddmktVs_HhX77AjTM",
                              project_name="Bloomy_Core",
                              job_name="CustomerToQuotationToSalesOrder_TestCase")
    step_settings = StepSettings(timeout=15000,
                                 sleep_time=500,
                                 sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    """1.Go to the Customer Doctype.(Desk >> Selling>> Customer) or Type Customer in Search bar.

     2.Open Customer. 3. On Customer Dashboard in pre sell section click on Quotation \"\" +\"\" sign. 4. Select Requested Delivery Date. 5. In Item Table hit on Add Row and Add item , Enter Qty and Rate. 6. Save and Submit. 7.Hit on create Button in the top Right and click on Sales order. 8. Customer , company, Date and Order type will be fetch from Quotation. 9. Select Expected Delivery Date. 10. Item Detail will be fetch from Quotation. 11.Save and Submit.
    """
    # Test Parameters
    # Auto generated application URL parameter
    ApplicationURL = "https://epitest-demo.bloomstack.io/"
    ActualCustNameOnCustSave = ""
    username = ""
    pwd = ""
    randomnm = ""
    ExpectedCustNm = ""
    ActualCustonQuotation = ""
    ExpectedCompanyonquotation = ""
    randomdt = ""
    ExpectedDT = ""
    ActualCustNmOnSalesOrder = ""
    ActualCompNmOnSalesOrder = ""
    ActualDTonSalesOrder = ""
    ActualCustNmOnSalesOrderSubmit = ""

    # 1. Navigate to '{ApplicationURL}'
    # Navigates the specified URL (Auto-generated)
    driver.get(f'{ApplicationURL}')

    # 2. Login to the Application
    test_login.test_main(driver)

    # 3. Click 'Search or type a command (Ctrl + G)'
    search_or_type_a_command_ctrl_g_ = driver.find_element(By.CSS_SELECTOR,
                                                           "#navbar-search")
    search_or_type_a_command_ctrl_g_.click()

    # 4. Type 'customer list' in 'Search or type a command (Ctrl + G)'
    search_or_type_a_command_ctrl_g_ = driver.find_element(By.CSS_SELECTOR,
                                                           "#navbar-search")
    search_or_type_a_command_ctrl_g_.send_keys("customer list")

    # 5. Click 'Customer List'
    customer_list = driver.find_element(By.XPATH,
                                        "//li[. = 'Customer List']")
    customer_list.click()

    # 6. Does 'Customer2' contain 'Customer'?
    customer2 = driver.find_element(By.XPATH,
                                    "//div[. = 'Customer']")
    step_output = customer2.text
    assert step_output and ("Customer" in step_output)

    # 7. Click 'New4'
    new4 = driver.find_element(By.XPATH,
                               "//button[. = 'New']")
    new4.click()

    # 8. Click 'Edit in full page'
    edit_in_full_page = driver.find_element(By.XPATH,
                                            "//button[. = 'Edit in full page']")
    edit_in_full_page.click()

    # 9. Click 'gettext Get text from INPUT101 Textbox'
    gettext_get_text_from_input101_textbox = driver.find_element(By.XPATH,
                                                                 "//div[3]/div/div/div[2]/div[3]/div[2]/div[1]/form/div[3]//input")
    gettext_get_text_from_input101_textbox.click()

    # 10. Generate random name
    step_output = driver.addons().execute(
        RandomDataGenerator.generatename(
        ))
    randomnm = step_output

    # 11. Type '{randomnm}' in 'gettext Get text from INPUT101 Textbox'
    gettext_get_text_from_input101_textbox = driver.find_element(By.XPATH,
                                                                 "//div[3]/div/div/div[2]/div[3]/div[2]/div[1]/form/div[3]//input")
    gettext_get_text_from_input101_textbox.send_keys(f'{randomnm}')

    # 12. Get text from 'getcust1'
    getcust1 = driver.find_element(By.XPATH,
                                   "//div[3]/div/div/div[2]/div[3]/div[2]/div[1]/form/div[3]//input")
    step_output = getcust1.get_attribute("value")
    ExpectedCustNm = step_output

    # 13. Does 'cust' contain 'New Customer 1'?
    cust = driver.find_element(By.XPATH,
                               "//div[. = 'New Customer 1']")
    step_output = cust.text
    assert step_output and ("New Customer 1" in step_output)

    # 14. Does 'status1' contain 'Not Saved'?
    status1 = driver.find_element(By.XPATH,
                                  "//span/span[. = 'Not Saved']")
    step_output = status1.text
    assert step_output and ("Not Saved" in step_output)

    # 15. Click 'Save13'
    save13 = driver.find_element(By.XPATH,
                                 "//button[2][. = 'Save']")
    save13.click()

    # 16. Click 'save344'
    save344 = driver.find_element(By.XPATH,
                                  "//button[2][. = 'Save']")
    save344.click()

    # 17. Get text from 'test name 123'
    test_name_123 = driver.find_element(By.XPATH,
                                        "//h1//div[. = 'test name 123']")
    step_output = test_name_123.get_attribute("value")
    ActualCustNameOnCustSave = step_output

    # 18. Does 'Enabled2' contain 'Enabled'?
    enabled2 = driver.find_element(By.XPATH,
                                   "//span/span[. = 'Enabled']")
    step_output = enabled2.text
    assert step_output and ("Enabled" in step_output)

    # 19. Click 'Save24'
    save24 = driver.find_element(By.XPATH,
                                 "//span[. = 'Save']")
    save24.click()

    # 20. Does 'Saved8' contain 'Saved'?
    saved8 = driver.find_element(By.XPATH,
                                 "//div[3]/div[. = 'Saved']")
    step_output = saved8.text
    assert step_output and ("Saved" in step_output)

    # 21. Compares '{ExpectedCustNm}' with '{ActualCustNameOnCustSave}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustNm}',
            secondString=f'{ActualCustNameOnCustSave}',
            ignoreCase=False,
            expectedResult=0))

    # 22. Click 'plus'
    # Click I6 i
    plus = driver.find_element(By.XPATH,
                               "//div[5]/div/div/div[1]/div[1]/div[2]//i")
    plus.click()

    # 23. Click 'txtcomp'
    txtcomp = driver.find_element(By.XPATH,
                                  "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[2]//input")
    txtcomp.click()

    # 24. Get text from 'getcustonquo2'
    getcustonquo2 = driver.find_element(By.XPATH,
                                        "//div[5]//div[. = 'ddd']")
    step_output = getcustonquo2.get_attribute("value")
    ActualCustonQuotation = step_output

    # 25. Compares '{ExpectedCustNm}' with '{ActualCustonQuotation}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustNm}',
            secondString=f'{ActualCustonQuotation}',
            ignoreCase=False,
            expectedResult=0))

    # 26. Type 'vap' in 'txtcomp'
    txtcomp = driver.find_element(By.XPATH,
                                  "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[2]//input")
    txtcomp.send_keys("vap")

    # 27. Click 'VapeCo15'
    vapeco15 = driver.find_element(By.XPATH,
                                   "//li[. = 'VapeCo']")
    vapeco15.click()

    # 28. Get text from 'getcom'
    getcom = driver.find_element(By.XPATH,
                                 "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[2]//input")
    step_output = getcom.get_attribute("value")
    ExpectedCompanyonquotation = step_output

    # 29. Click 'dt'
    dt = driver.find_element(By.XPATH,
                             "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[4]//input")
    dt.click()

    # 30. Positive values for future and negative for past dates
    step_output = driver.addons().execute(
        GenerateDateTimeCurrentFutureOrPast.futurepastaction(
            days=3,
            months=0,
            years=0,
            hours=0,
            minutes=0,
            format="dd"))
    randomdt = step_output

    # 31. Click '3018'
    _3018 = driver.find_element(By.XPATH,
                                f'//div[5]/div[1]/div/div/div[. = {randomdt}]')
    _3018.click()

    # 32. Get text from 'date123'
    date123 = driver.find_element(By.XPATH,
                                  "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[4]//input")
    step_output = date123.get_attribute("value")
    ExpectedDT = step_output

    # 33. Does 'newquo' contain '[NONE]'?
    # Does New Quotation 11 Div contain "New Quotation 1" ?
    newquo = driver.find_element(By.XPATH,
                                 "//div[. = 'New Quotation 1']")
    step_output = newquo.text
    assert step_output and ("" in step_output)

    # 34. Does 'Not Saved11' contain '[NONE]'?
    # Does Not Saved1 span contain "Not Saved" ?
    not_saved11 = driver.find_element(By.XPATH,
                                      "//span/span[. = 'Not Saved']")
    step_output = not_saved11.text
    assert step_output and ("" in step_output)

    # 35. Click 'Add Row8'
    add_row8 = driver.find_element(By.XPATH,
                                   "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[6]//button[. = '\n\t\t\t\t\t\t\tAdd Row']")
    add_row8.click()

    # 36. Click 'DIV30'
    div30 = driver.find_element(By.XPATH,
                                "//form/div/div/div[2]/div[2]/div[1]/div/div/div[2]")
    div30.click()

    # 37. Click 'Item Code5'
    item_code5 = driver.find_element(By.XPATH,
                                     "//input[@placeholder = 'Item Code']")
    item_code5.click()

    # 38. Click 'P16'
    p16 = driver.find_element(By.XPATH,
                              "//div[1]/div/div/div/ul/li[1]/a/p")
    p16.click()

    # 39. Click 'Save23'
    save23 = driver.find_element(By.XPATH,
                                 "//div[4]//button[2][. = 'Save']")
    save23.click()

    # 40. Click 'Close3'
    close3 = driver.find_element(By.XPATH,
                                 "//div[2]/div/div//span[. = 'Close']")
    close3.click()

    # 41. Click 'Submit4'
    submit4 = driver.find_element(By.XPATH,
                                  "//button[. = 'Submit']")
    submit4.click()

    # 42. Click 'Yes11'
    yes11 = driver.find_element(By.XPATH,
                                "//button[. = 'Yes']")
    yes11.click()

    # 43. Click 'Close3'
    close3 = driver.find_element(By.XPATH,
                                 "//div[2]/div/div//span[. = 'Close']")
    close3.click()

    # 44. Does 'Quotation has been submitted successf...3' contain 'Quotation has been submitted successfully'?
    quotation_has_been_submitted_successf_3 = driver.find_element(By.XPATH,
                                                                  "//div[. = 'Quotation has been submitted successfully']")
    step_output = quotation_has_been_submitted_successf_3.text
    assert step_output and (
        "Quotation has been submitted successfully" in step_output)

    # 45. Does 'open 12' contain '[NONE]'?
    open_12 = driver.find_element(By.XPATH,
                                  "//span/span[. = 'Open']")
    step_output = open_12.text
    assert step_output and ("" in step_output)

    # 46. Click 'crt'
    # Click on create
    crt = driver.find_element(By.XPATH,
                              "//button[. = '\t\t\t\tCreate ']")
    crt.click()

    # 47. Click 'sale345' if it's visible
    # salesorderlink
    sale345 = (By.XPATH, "//li[2]/a[. = 'Sales Order']")
    driver.addons().execute(
        VisibleElementsOperations.clickifvisibleweb(
            timeout=""), *sale345)

    # 48. Does 'text456' contain '[NONE]'?
    text456 = driver.find_element(By.XPATH,
                                  "//div[. = 'New Sales Order 1']")
    step_output = text456.text
    assert step_output and ("" in step_output)

    # 49. Does 'txt567' contain '[NONE]'?
    txt567 = driver.find_element(By.XPATH,
                                 "//span/span[. = 'Not Saved']")
    step_output = txt567.text
    assert step_output and ("" in step_output)

    '''
    # (STEP DISABLED)
    # 50. Get text from 'div1211' if it's visible
    # Get text from salsordercust Textbox
    div1211 = (By.XPATH, "//div[5]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[1]/form/div[3]//input")
    step_output = driver.addons().execute(
    VisibleElementsOperations.gettextifvisibleweb(
    timeout = ""), *div1211)
    ActualCustNmOnSalesOrder = step_output
    '''

    '''
    # (STEP DISABLED)
    # 51. Get text from 'com1231' if it's visible
    # Get text from txtcomp Textbox
    com1231 = (By.XPATH, "//div[5]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[2]//input")
    step_output = driver.addons().execute(
    VisibleElementsOperations.gettextifvisibleweb(
    timeout = ""), *com1231)
    ActualCompNmOnSalesOrder = step_output
    '''

    '''
    # (STEP DISABLED)
    # 52. Get text from 'date3451' if it's visible
    date3451 = (By.XPATH, "//div[5]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[4]//input")
    step_output = driver.addons().execute(
    VisibleElementsOperations.gettextifvisibleweb(
    timeout = ""), *date3451)
    ActualDTonSalesOrder = step_output
    '''

    '''
    # (STEP DISABLED)
    # 53. Compares '{ExpectedCustNm}' with '{ActualCompNmOnSalesOrder}'
    step_output = driver.addons().execute(
    StringUtils.comparetwostrings(
    firstString = f'{ExpectedCustNm}',
    secondString = f'{ActualCompNmOnSalesOrder}',
    ignoreCase = False,
    expectedResult = 0))
    '''

    '''
    # (STEP DISABLED)
    # 54. Compares '{ExpectedCompanyonquotation}' with '{ActualCompNmOnSalesOrder}'
    step_output = driver.addons().execute(
    StringUtils.comparetwostrings(
    firstString = f'{ExpectedCompanyonquotation}',
    secondString = f'{ActualCompNmOnSalesOrder}',
    ignoreCase = False,
    expectedResult = 0))
    '''

    '''
    # (STEP DISABLED)
    # 55. Compare '{ExpectedDT}' with '{ActualDTonSalesOrder}'
    step_output = driver.addons().execute(
    CompareDates.comparedates(
    dateOne = f'{ExpectedDT}',
    dateTwo = f'{ActualDTonSalesOrder}',
    format = "MM-dd-yyyy"))
    '''

    # 56. Click 'SPAN1625'
    span1625 = driver.find_element(By.XPATH,
                                   "//div[2]/div/div[2]/div[2]/div[1]/div/div/div[6]//span")
    span1625.click()

    # 57. Click 'INPUT12851'
    input12851 = driver.find_element(By.XPATH,
                                     "//div[1]/div/div[2]/form/div[1]//input")
    input12851.click()

    # 58. Click 'DIV4513'
    div4513 = driver.find_element(By.XPATH,
                                  "//body/div[1]/div/div[5]/div")
    div4513.click()

    # 59. Click 'Save11' if it's visible
    save11 = (By.XPATH, "//button[. = 'Save']")
    driver.addons().execute(
        VisibleElementsOperations.clickifvisibleweb(
            timeout=""), *save11)

    # 60. Click 'buttonsave'
    buttonsave = driver.find_element(By.XPATH,
                                     "//button[. = 'Save']")
    buttonsave.click()

    # 61. Click 'Close3'
    close3 = driver.find_element(By.XPATH,
                                 "//div[2]/div/div//span[. = 'Close']")
    close3.click()

    # 62. Does 'Draft2' contain 'Draft'?
    draft2 = driver.find_element(By.XPATH,
                                 "//span/span[. = 'Draft']")
    step_output = draft2.text
    assert step_output and ("Draft" in step_output)

    # 63. Click 'Submit13'
    submit13 = driver.find_element(By.XPATH,
                                   "//div[5]//button[. = 'Submit']")
    submit13.click()

    # 64. Click 'Yes7'
    yes7 = driver.find_element(By.XPATH,
                               "//div[2]/div/div//button[. = 'Yes']")
    yes7.click()

    # 65. Click 'Close3'
    close3 = driver.find_element(By.XPATH,
                                 "//div[2]/div/div//span[. = 'Close']")
    close3.click()

    # 66. Does 'Sales Order has been submitted succes...4' contain 'Sales Order has been submitted successfully'?
    sales_order_has_been_submitted_succes_4 = driver.find_element(By.XPATH,
                                                                  "//div[. = 'Sales Order has been submitted successfully']")
    step_output = sales_order_has_been_submitted_succes_4.text
    assert step_output and (
        "Sales Order has been submitted successfully" in step_output)

    # 67. Does 'To Deliver and Bill' contain 'To Deliver and Bill'?
    to_deliver_and_bill = driver.find_element(By.XPATH,
                                              "//span/span[. = 'To Deliver and Bill']")
    step_output = to_deliver_and_bill.text
    assert step_output and ("To Deliver and Bill" in step_output)

    # 68. Get text from 'tvv'
    tvv = driver.find_element(By.XPATH,
                              "//div[5]/div[1]/div/div/div[1]/h1/div/div")
    step_output = tvv.get_attribute("value")
    ActualCustNmOnSalesOrderSubmit = step_output

    # 69. Compares '{ExpectedCustNm}' with '{ActualCustNmOnSalesOrderSubmit}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustNm}',
            secondString=f'{ActualCustNmOnSalesOrderSubmit}',
            ignoreCase=False,
            expectedResult=0))

    # 70. Logout from the application
    test_logout.test_main(driver)
