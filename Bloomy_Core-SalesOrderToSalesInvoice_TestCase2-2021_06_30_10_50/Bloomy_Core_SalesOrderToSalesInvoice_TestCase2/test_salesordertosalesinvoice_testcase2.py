from addons.generate_date_time_current_future_or_past_ import GenerateDateTimeCurrentFutureOrPast
from addons.string_utils import StringUtils
from distutils.util import strtobool
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
from subtests import test_login
from subtests import test_logout
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: Bloomy_Core
    Package: TestProject.Generated.Tests.BloomyCore
    Test: SalesOrderToSalesInvoice_TestCase2
    Generated by: Meenal Kardale (meenal.kardale@extrapreneurs-india.com)
    Generated on 06/30/2021, 10:50:06
"""


@pytest.fixture()
def driver():
    driver = webdriver.Chrome(token="3J0RNM_48lLt_KM5Ab6s6A_HZzddmktVs_HhX77AjTM",
                              project_name="Bloomy_Core",
                              job_name="SalesOrderToSalesInvoice_TestCase2")
    step_settings = StepSettings(timeout=15000,
                                 sleep_time=500,
                                 sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    """1. Go to the Sales Order Doctype.(Desk >> Selling >> Sales Order) or Type sales Order on search bar.

    2.Hit on New.3. Enter Customer , Company name and Expected Delivery Date 4. Select Delivery Warehouse5. Click on save and Submit6. Hit on create Button in the top Right and click on Invoice7. Select Series 8. Click on Save and Submit.
    """
    # Test Parameters
    # Auto generated application URL parameter
    ApplicationURL = "https://epitest-demo.bloomstack.io/"
    ActualCustNmOnSalesOrderSubmit = ""
    ActualCustNmOnSalesInvoiceSubmit = ""
    username = "testautomationuser@bloomstack.com"
    pwd = "epi@123"
    RandomFutureDt = ""
    ExpectedCompany = ""
    ExpectedReqDeliDate = ""
    ExpectedCustName = ""
    ActualCustNmonSalesInvoiceScreen = ""
    ActualCompOnSalesInvoiceScreen = ""

    # 1. Navigate to '{ApplicationURL}'
    # Navigates the specified URL (Auto-generated)
    driver.get(f'{ApplicationURL}')

    # 2. Login to the Application
    test_login.test_main(driver)

    # 3. Click 'Search or type a command (Ctrl + G)'
    search_or_type_a_command_ctrl_g_ = driver.find_element(By.CSS_SELECTOR,
                                                           "#navbar-search")
    search_or_type_a_command_ctrl_g_.click()

    # 4. Type 'sales order' in 'Search or type a command (Ctrl + G)'
    search_or_type_a_command_ctrl_g_ = driver.find_element(By.CSS_SELECTOR,
                                                           "#navbar-search")
    search_or_type_a_command_ctrl_g_.send_keys("sales order")

    # 5. Click 'Sales Order List'
    sales_order_list = driver.find_element(By.XPATH,
                                           "//li[. = 'Sales Order List']")
    sales_order_list.click()

    # 6. Does 'Sales Order6' contain 'Sales Order'?
    sales_order6 = driver.find_element(By.XPATH,
                                       "//div[. = 'Sales Order']")
    step_output = sales_order6.text
    assert step_output and ("Sales Order" in step_output)

    # 7. Click 'New1'
    new1 = driver.find_element(By.XPATH,
                               "//span[. = 'New']")
    new1.click()

    # 8. Does 'New Sales Order 126' contain 'New Sales Order 1'?
    new_sales_order_126 = driver.find_element(By.XPATH,
                                              "//div[. = 'New Sales Order 1']")
    step_output = new_sales_order_126.text
    assert step_output and ("New Sales Order 1" in step_output)

    # 9. Does 'status1' contain 'Not Saved'?
    status1 = driver.find_element(By.XPATH,
                                  "//span/span[. = 'Not Saved']")
    step_output = status1.text
    assert step_output and ("Not Saved" in step_output)

    # 10. Click 'INPUT55'
    input55 = driver.find_element(By.XPATH,
                                  "//div[3]/div/div[1]/form/div[3]//input")
    input55.click()

    # 11. Type 'air' in 'INPUT55'
    input55 = driver.find_element(By.XPATH,
                                  "//div[3]/div/div[1]/form/div[3]//input")
    input55.send_keys("air")

    # 12. Click 'LI7'
    li7 = driver.find_element(By.XPATH,
                              "//div[3]/div/div[2]/div[1]/div/div/ul/li[1]")
    li7.click()

    # 13. Is 'inputdate' is clickable?
    inputdate = driver.find_element(By.XPATH,
                                    "//div[4]/div/div[2]/div/input")
    assert inputdate.is_enabled()

    # 14. Click 'clickdttextbox'
    clickdttextbox = driver.find_element(By.XPATH,
                                         "//div[4]/div/div[2]/div/input")
    clickdttextbox.click()

    # 15. Positive values for future and negative for past dates
    step_output = driver.addons().execute(
        GenerateDateTimeCurrentFutureOrPast.futurepastaction(
            days=3,
            months=0,
            years=0,
            hours=0,
            minutes=0,
            format="dd"))
    RandomFutureDt = step_output

    # 16. Click '3020'
    _3020 = driver.find_element(By.XPATH,
                                f'//div[3]//div[. =~?~RandomExpDate~?~]')
    _3020.click()

    # 17. Click 'DIV25'
    div25 = driver.find_element(By.XPATH,
                                "//div[2]/div/div[2]/div[2]/div[1]/div/div/div[2]")
    div25.click()

    # 18. Click 'LI6'
    li6 = driver.find_element(By.XPATH,
                              "//div[2]/div[1]/div/div/div[2]/div[1]/div//li[1]")
    li6.click()

    # 19. Get text from 'INPUT55'
    input55 = driver.find_element(By.XPATH,
                                  "//div[3]/div/div[1]/form/div[3]//input")
    step_output = input55.get_attribute("value")
    ExpectedCustName = step_output

    # 20. Get text from 'INPUT1271'
    input1271 = driver.find_element(By.XPATH,
                                    "//div[3]/div/div[2]/form/div[2]//input")
    step_output = input1271.get_attribute("value")
    ExpectedCompany = step_output

    # 21. Get text from 'clickdttextbox'
    clickdttextbox = driver.find_element(By.XPATH,
                                         "//div[4]/div/div[2]/div/input")
    step_output = clickdttextbox.get_attribute("value")
    ExpectedReqDeliDate = step_output

    # 22. Click 'Save24'
    save24 = driver.find_element(By.XPATH,
                                 "//span[. = 'Save']")
    save24.click()

    # 23. Click 'Close'
    close = driver.find_element(By.XPATH,
                                "//button[. = '\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t']")
    close.click()

    # 24. Does 'Draft' contain 'Draft'?
    draft = driver.find_element(By.XPATH,
                                "//span/span[. = 'Draft']")
    step_output = draft.text
    assert step_output and ("Draft" in step_output)

    # 25. Click 'Submit8'
    submit8 = driver.find_element(By.XPATH,
                                  "//button[. = 'Submit']")
    submit8.click()

    # 26. Click 'Yes11'
    yes11 = driver.find_element(By.XPATH,
                                "//button[. = 'Yes']")
    yes11.click()

    # 27. Click 'Close89'
    close89 = driver.find_element(By.XPATH,
                                  "//button[. = '\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t']")
    close89.click()

    # 28. Does 'Sales Order has been submitted succes...312' contain 'Sales Order has been submitted successfully'?
    sales_order_has_been_submitted_succes_312 = driver.find_element(By.XPATH,
                                                                    "//div[. = 'Sales Order has been submitted successfully']")
    step_output = sales_order_has_been_submitted_succes_312.text
    assert step_output and (
        "Sales Order has been submitted successfully" in step_output)

    # 29. Does 'To Deliver and Bill3' contain 'To Deliver and Bill'?
    to_deliver_and_bill3 = driver.find_element(By.XPATH,
                                               "//span/span[. = 'To Deliver and Bill']")
    step_output = to_deliver_and_bill3.text
    assert step_output and ("To Deliver and Bill" in step_output)

    # 30. Get text from 'Airfield Supply Co.1'
    airfield_supply_co_1 = driver.find_element(By.XPATH,
                                               "//h1//div[. = 'Airfield Supply Co.']")
    step_output = airfield_supply_co_1.get_attribute("value")
    ActualCustNmOnSalesOrderSubmit = step_output

    # 31. Compares '{ExpectedCustName}' with '{ActualCustNmOnSalesOrderSubmit}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustName}',
            secondString=f'{ActualCustNmOnSalesOrderSubmit}',
            ignoreCase=False,
            expectedResult=0))

    # 32. Click 'Create46'
    # click on create button
    create46 = driver.find_element(By.XPATH,
                                   "//button[. = '\t\t\t\tCreate ']")
    create46.click()

    # 33. Click 'Invoice123'
    # Click Invoice link
    invoice123 = driver.find_element(By.XPATH,
                                     "//a[. = 'Invoice']")
    invoice123.click()

    # 34. Does 'New Sales Invoice 11' contain 'New Sales Invoice 1'?
    new_sales_invoice_11 = driver.find_element(By.XPATH,
                                               "//div[. = 'New Sales Invoice 1']")
    step_output = new_sales_invoice_11.text
    assert step_output and ("New Sales Invoice 1" in step_output)

    # 35. Does 'Not Saved11' contain 'Not Saved'?
    not_saved11 = driver.find_element(By.XPATH,
                                      "//span/span[. = 'Not Saved']")
    step_output = not_saved11.text
    assert step_output and ("Not Saved" in step_output)

    # 36. Click 'SELECT20'
    select20 = driver.find_element(By.XPATH,
                                   "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[1]/form/div[2]//select")
    select20.click()

    # 37. Select the 'ACC-SINV-IND-YYYY.-' option in 'SELECT20'
    select20 = driver.find_element(By.XPATH,
                                   "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[1]/form/div[2]//select")
    Select(select20).select_by_value("ACC-SINV-IND-YYYY.-")

    # 38. Click 'SELECT20'
    select20 = driver.find_element(By.XPATH,
                                   "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[1]/form/div[2]//select")
    select20.click()

    # 39. Get text from 'getcust123'
    getcust123 = driver.find_element(By.XPATH,
                                     "//div[3]/div/div[1]/form/div[3]//input")
    step_output = getcust123.get_attribute("value")
    ActualCustNmonSalesInvoiceScreen = step_output

    # 40. Get text from 'getcomp67'
    getcomp67 = driver.find_element(By.XPATH,
                                    "//div[3]/div/div[2]/form/div[1]//input")
    step_output = getcomp67.get_attribute("value")
    ActualCompOnSalesInvoiceScreen = step_output

    # 41. Compares '{ExpectedCustName}' with '{ActualCustNmonSalesInvoiceScreen}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustName}',
            secondString=f'{ActualCustNmonSalesInvoiceScreen}',
            ignoreCase=False,
            expectedResult=0))

    # 42. Compares '{ExpectedCompany}' with '{ActualCompOnSalesInvoiceScreen}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCompany}',
            secondString=f'{ActualCompOnSalesInvoiceScreen}',
            ignoreCase=False,
            expectedResult=0))

    # 43. Click 'saveclick'
    saveclick = driver.find_element(By.XPATH,
                                    "//button[. = 'Save']")
    saveclick.click()

    # 44. Click 'Close89'
    close89 = driver.find_element(By.XPATH,
                                  "//button[. = '\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t']")
    close89.click()

    # 45. Does 'draftstat' contain 'Draft'?
    draftstat = driver.find_element(By.XPATH,
                                    "//span/span[. = 'Draft']")
    step_output = draftstat.text
    assert step_output and ("Draft" in step_output)

    # 46. Click 'Submit17'
    submit17 = driver.find_element(By.XPATH,
                                   "//div[4]//button[. = 'Submit']")
    submit17.click()

    # 47. Click 'Yes7'
    yes7 = driver.find_element(By.XPATH,
                               "//div[2]/div/div//button[. = 'Yes']")
    yes7.click()

    # 48. Click 'Close10'
    close10 = driver.find_element(By.XPATH,
                                  "//button/span[. = 'Close']")
    close10.click()

    # 49. Does 'Sales Invoice has been submitted succ...1' contain 'Sales Invoice has been submitted successfully'?
    sales_invoice_has_been_submitted_succ_1 = driver.find_element(By.XPATH,
                                                                  "//div[. = 'Sales Invoice has been submitted successfully']")
    step_output = sales_invoice_has_been_submitted_succ_1.text
    assert step_output and (
        "Sales Invoice has been submitted successfully" in step_output)

    # 50. Does 'Unpaid' contain 'Unpaid'?
    unpaid = driver.find_element(By.XPATH,
                                 "//span/span[. = 'Unpaid']")
    step_output = unpaid.text
    assert step_output and ("Unpaid" in step_output)

    # 51. Get text from 'Airfield Supply Co.2'
    airfield_supply_co_2 = driver.find_element(By.XPATH,
                                               "//div[4]/div[1]/div/div//div[. = 'Airfield Supply Co.']")
    step_output = airfield_supply_co_2.get_attribute("value")
    ActualCustNmOnSalesInvoiceSubmit = step_output

    # 52. Compares '{ExpectedCustName}' with '{ActualCustNmOnSalesInvoiceSubmit}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustName}',
            secondString=f'{ActualCustNmOnSalesInvoiceSubmit}',
            ignoreCase=False,
            expectedResult=0))

    # 53. Logout from the application
    test_logout.test_main(driver)
