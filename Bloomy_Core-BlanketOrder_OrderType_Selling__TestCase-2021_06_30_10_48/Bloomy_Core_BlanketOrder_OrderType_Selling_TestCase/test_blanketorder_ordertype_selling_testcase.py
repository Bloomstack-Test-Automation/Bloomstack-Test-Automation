from addons.compare_dates import CompareDates
from addons.generate_date_time_current_future_or_past_ import GenerateDateTimeCurrentFutureOrPast
from addons.string_utils import StringUtils
from distutils.util import strtobool
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
from subtests import test_login
from subtests import test_logout
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: Bloomy_Core
    Package: TestProject.Generated.Tests.BloomyCore
    Test: BlanketOrder_OrderType(Selling)_TestCase
    Generated by: Meenal Kardale (meenal.kardale@extrapreneurs-india.com)
    Generated on 06/30/2021, 10:48:21
"""


@pytest.fixture()
def driver():
    driver = webdriver.Chrome(token="3J0RNM_48lLt_KM5Ab6s6A_HZzddmktVs_HhX77AjTM",
                              project_name="Bloomy_Core",
                              job_name="BlanketOrder_OrderType(Selling)_TestCase")
    step_settings = StepSettings(timeout=15000,
                                 sleep_time=500,
                                 sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    """1) Go to Selling , Click on Blanket Orders and click on new .

    2) Enter customer name, from date , to date. Select company and order type as selling 3) Add Item and Click on save4) Verify company name, ordertype and company name5) Click on create sales order button 6) Verify Item and customer name7) Enter expected delivery date and click on save and submit.
    """
    # Test Parameters
    # Auto generated application URL parameter
    ApplicationURL = "https://epitest-demo.bloomstack.io/"
    ExpectedCustomerName = ""
    ActualCustNmonSamePage = ""
    ExpectedFromDate = ""
    ExpectedToDate = ""
    ExpectedItem = ""
    ExpectedItemQty = ""
    ExpectedItemRate = ""
    ExpectedTerms = ""
    ExpectedBlanketOrderID = ""
    ActualCustomerNameOnSubmit = ""
    ActualCustNameOne = ""
    ActualFromDate = ""
    ActualToDate = ""
    ActualCompany = ""
    ActualItem = ""
    ActualTitleOnSalesOrderSave = ""
    username = ""
    pwd = ""
    FromDate_Day = ""
    ToDate_Day = ""
    ExpectedCompany = ""
    ExpectedDeliDate_day = ""
    ActualCustonSalesOrderPage = ""
    ActualCompOnSalesOrder = ""
    ActualItemOnSalesOrder = ""
    ActualItemQtyOnSalesOrder = ""
    ActualItemRateOnSalesOrder = ""

    # 1. Navigate to '{ApplicationURL}'
    # Navigates the specified URL (Auto-generated)
    driver.get(f'{ApplicationURL}')

    # 2. Login to the Application
    test_login.test_main(driver)

    # 3. Click 'Selling'
    selling = driver.find_element(By.XPATH,
                                  "//a[. = '\n                Selling\n              ']")
    selling.click()

    # 4. Does 'Selling1' contain 'Selling'?
    selling1 = driver.find_element(By.XPATH,
                                   "//div[. = 'Selling']")
    step_output = selling1.text
    assert step_output and ("Selling" in step_output)

    # 5. Click 'Blanket Order'
    blanket_order = driver.find_element(By.XPATH,
                                        "//div/a[. = 'Blanket Order']")
    blanket_order.click()

    # 6. Does 'Blanket Order1' contain 'Blanket Order'?
    blanket_order1 = driver.find_element(By.XPATH,
                                         "//div[. = 'Blanket Order']")
    step_output = blanket_order1.text
    assert step_output and ("Blanket Order" in step_output)

    # 7. Click 'New'
    new = driver.find_element(By.XPATH,
                              "//button[. = 'New']")
    new.click()

    # 8. Click 'SELECT16'
    select16 = driver.find_element(By.XPATH,
                                   "//div[3]/div/div[2]//select")
    select16.click()

    # 9. Select the 'Selling' option in 'SELECT16'
    select16 = driver.find_element(By.XPATH,
                                   "//div[3]/div/div[2]//select")
    Select(select16).select_by_value("Selling")

    # 10. Click 'SELECT16'
    select16 = driver.find_element(By.XPATH,
                                   "//div[3]/div/div[2]//select")
    select16.click()

    # 11. Click 'INPUT111'
    input111 = driver.find_element(By.XPATH,
                                   "//div[4]/div/div[2]/div[1]/div/div/input")
    input111.click()

    # 12. Type 'abhi' in 'INPUT111'
    input111 = driver.find_element(By.XPATH,
                                   "//div[4]/div/div[2]/div[1]/div/div/input")
    input111.send_keys("abhi")

    # 13. Click 'P13'
    p13 = driver.find_element(By.XPATH,
                              "//li[1]/a/p")
    p13.click()

    # 14. Get text from 'INPUT111'
    input111 = driver.find_element(By.XPATH,
                                   "//div[4]/div/div[2]/div[1]/div/div/input")
    step_output = input111.get_attribute("value")
    ExpectedCustomerName = step_output

    # 15. Get text from 'ABHISHEK JHA'
    abhishek_jha = driver.find_element(By.XPATH,
                                       "//div[. = 'ABHISHEK JHA']")
    step_output = abhishek_jha.get_attribute("value")
    ActualCustNmonSamePage = step_output

    # 16. Compares '{ExpectedCustomerName}' with '{ActualCustNmonSamePage}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustomerName}',
            secondString=f'{ActualCustNmonSamePage}',
            ignoreCase=False,
            expectedResult=0))

    # 17. Click 'INPUT112'
    input112 = driver.find_element(By.XPATH,
                                   "//form/div[1]/div/div[2]/div/input")
    input112.click()

    # 18. Positive values for future and negative for past dates
    step_output = driver.addons().execute(
        GenerateDateTimeCurrentFutureOrPast.futurepastaction(
            days=5,
            months=0,
            years=0,
            hours=0,
            minutes=0,
            format="dd"))
    FromDate_Day = step_output

    # 19. Click '281'
    _281 = driver.find_element(By.XPATH,
                               f'//div[1]/div[1]/div/div/div[. = {FromDate_Day}]')
    _281.click()

    # 20. Get text from 'INPUT112'
    input112 = driver.find_element(By.XPATH,
                                   "//form/div[1]/div/div[2]/div/input")
    step_output = input112.get_attribute("value")
    ExpectedFromDate = step_output

    # 21. Click 'INPUT113'
    input113 = driver.find_element(By.XPATH,
                                   "//form/div[2]/div/div[2]/div/input")
    input113.click()

    # 22. Positive values for future and negative for past dates
    step_output = driver.addons().execute(
        GenerateDateTimeCurrentFutureOrPast.futurepastaction(
            days=10,
            months=0,
            years=0,
            hours=0,
            minutes=0,
            format="dd"))
    ToDate_Day = step_output

    # 23. Click '307'
    _307 = driver.find_element(By.XPATH,
                               f'//div[2]/div//div[. = {ToDate_Day}]')
    _307.click()

    # 24. Get text from 'INPUT113'
    input113 = driver.find_element(By.XPATH,
                                   "//form/div[2]/div/div[2]/div/input")
    step_output = input113.get_attribute("value")
    ExpectedToDate = step_output

    # 25. Click 'INPUT114'
    input114 = driver.find_element(By.XPATH,
                                   "//form/div[3]//input")
    input114.click()

    # 26. Type 'vap' in 'INPUT114'
    input114 = driver.find_element(By.XPATH,
                                   "//form/div[3]//input")
    input114.send_keys("vap")

    # 27. Click 'VapeCo11'
    vapeco11 = driver.find_element(By.XPATH,
                                   "//li[. = 'VapeCo']")
    vapeco11.click()

    # 28. Get text from 'GetExpectedCompany'
    getexpectedcompany = driver.find_element(By.XPATH,
                                             "//form/div[3]//input")
    step_output = getexpectedcompany.get_attribute("value")
    ExpectedCompany = step_output

    # 29. Click 'DIV35'
    div35 = driver.find_element(By.XPATH,
                                "//form/div[1]/div/div[2]/div[2]/div[1]/div/div/div[2]")
    div35.click()

    # 30. Click 'LI13'
    li13 = driver.find_element(By.XPATH,
                               "//div[2]/div[1]/div/div/div[2]/div[1]//li[1]")
    li13.click()

    # 31. Click 'Quantity'
    quantity = driver.find_element(By.XPATH,
                                   "//input[@placeholder = 'Quantity']")
    quantity.click()

    # 32. Type '10.00' in 'Quantity'
    quantity = driver.find_element(By.XPATH,
                                   "//input[@placeholder = 'Quantity']")
    quantity.send_keys("10.00")

    # 33. Click 'Rate'
    rate = driver.find_element(By.XPATH,
                               "//input[@placeholder = 'Rate']")
    rate.click()

    # 34. Type '100.00' in 'Rate'
    rate = driver.find_element(By.XPATH,
                               "//input[@placeholder = 'Rate']")
    rate.send_keys("100.00")

    # 35. Get text from 'Item Code'
    item_code = driver.find_element(By.XPATH,
                                    "//input[@placeholder = 'Item Code']")
    step_output = item_code.get_attribute("value")
    ExpectedItem = step_output

    # 36. Get text from 'Quantity'
    quantity = driver.find_element(By.XPATH,
                                   "//input[@placeholder = 'Quantity']")
    step_output = quantity.get_attribute("value")
    ExpectedItemQty = step_output

    # 37. Get text from 'Rate'
    rate = driver.find_element(By.XPATH,
                               "//input[@placeholder = 'Rate']")
    step_output = rate.get_attribute("value")
    ExpectedItemRate = step_output

    # 38. Click 'INPUT115'
    input115 = driver.find_element(By.XPATH,
                                   "//form/div[1]/div/div[2]/div[1]/div/div/input")
    input115.click()

    # 39. Type '[NONE]' in 'INPUT115'
    input115 = driver.find_element(By.XPATH,
                                   "//form/div[1]/div/div[2]/div[1]/div/div/input")
    input115.send_keys(" ")

    # 40. Click 'EPI-Sales-T&C2-Selling'
    epi_sales_t_c2_selling = driver.find_element(By.XPATH,
                                                 "//li[. = 'EPI-Sales-T&C2-Selling']")
    epi_sales_t_c2_selling.click()

    # 41. Get text from 'INPUT115'
    input115 = driver.find_element(By.XPATH,
                                   "//form/div[1]/div/div[2]/div[1]/div/div/input")
    step_output = input115.get_attribute("value")
    ExpectedTerms = step_output

    # 42. Does 'New Blanket Order 1' contain 'New Blanket Order 1'?
    new_blanket_order_1 = driver.find_element(By.XPATH,
                                              "//div[. = 'New Blanket Order 1']")
    step_output = new_blanket_order_1.text
    assert step_output and ("New Blanket Order 1" in step_output)

    # 43. Does 'Not Saved2' contain 'Not Saved'?
    not_saved2 = driver.find_element(By.XPATH,
                                     "//span/span[. = 'Not Saved']")
    step_output = not_saved2.text
    assert step_output and ("Not Saved" in step_output)

    # 44. Click 'clicksabutton'
    clicksabutton = driver.find_element(By.XPATH,
                                        "//button[. = 'Save']")
    clicksabutton.click()

    # 45. Get text from 'MFG-BLR-2021-00019'
    mfg_blr_2021_00019 = driver.find_element(By.XPATH,
                                             "//div[. = 'MFG-BLR-2021-00019']")
    step_output = mfg_blr_2021_00019.get_attribute("value")
    ExpectedBlanketOrderID = step_output

    # 46. Does 'Draft' contain 'Draft'?
    draft = driver.find_element(By.XPATH,
                                "//span/span[. = 'Draft']")
    step_output = draft.text
    assert step_output and ("Draft" in step_output)

    # 47. Click 'Submit9'
    submit9 = driver.find_element(By.XPATH,
                                  "//button[. = 'Submit']")
    submit9.click()

    # 48. Click 'Yes'
    yes = driver.find_element(By.XPATH,
                              "//button[. = 'Yes']")
    yes.click()

    # 49. Does 'Submitted1' contain 'Submitted'?
    submitted1 = driver.find_element(By.XPATH,
                                     "//span/span[. = 'Submitted']")
    step_output = submitted1.text
    assert step_output and ("Submitted" in step_output)

    # 50. Does 'Selling2' contain 'Selling'?
    selling2 = driver.find_element(By.XPATH,
                                   "//div[2][. = 'Selling']")
    step_output = selling2.text
    assert step_output and ("Selling" in step_output)

    # 51. Click 'Selling2'
    selling2 = driver.find_element(By.XPATH,
                                   "//div[2][. = 'Selling']")
    selling2.click()

    # 52. Get text from 'ABHISHEK JHA1'
    abhishek_jha1 = driver.find_element(By.XPATH,
                                        "//div[. = '\n\t\t\t\tABHISHEK JHA']")
    step_output = abhishek_jha1.get_attribute("value")
    ActualCustomerNameOnSubmit = step_output

    # 53. Get text from 'ABHISHEK JHA'
    abhishek_jha = driver.find_element(By.XPATH,
                                       "//div[. = 'ABHISHEK JHA']")
    step_output = abhishek_jha.get_attribute("value")
    ActualCustNameOne = step_output

    # 54. Get text from 'fromdt'
    fromdt = driver.find_element(By.XPATH,
                                 "//div[2]/form/div[1]/div/div/div[2]")
    step_output = fromdt.get_attribute("value")
    ActualFromDate = step_output

    # 55. Get text from 'todt'
    todt = driver.find_element(By.XPATH,
                               "//div[2]/form/div[2]/div/div/div[2]")
    step_output = todt.get_attribute("value")
    ActualToDate = step_output

    # 56. Get text from 'VapeCo12'
    vapeco12 = driver.find_element(By.XPATH,
                                   "//div[. = '\n\t\t\t\tVapeCo']")
    step_output = vapeco12.get_attribute("value")
    ActualCompany = step_output

    # 57. Get text from 'DIV35'
    div35 = driver.find_element(By.XPATH,
                                "//form/div[1]/div/div[2]/div[2]/div[1]/div/div/div[2]")
    step_output = div35.get_attribute("value")
    ActualItem = step_output

    # 58. Compares '{ExpectedCustomerName}' with '{ActualCustomerNameOnSubmit}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustomerName}',
            secondString=f'{ActualCustomerNameOnSubmit}',
            ignoreCase=False,
            expectedResult=0))

    # 59. Compares '{ExpectedCustomerName}' with '{ActualCustNameOne}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustomerName}',
            secondString=f'{ActualCustNameOne}',
            ignoreCase=False,
            expectedResult=0))

    # 60. Compare '{ExpectedFromDate}' with '{ActualFromDate}'
    step_output = driver.addons().execute(
        CompareDates.comparedates(
            dateOne=f'{ExpectedFromDate}',
            dateTwo=f'{ActualFromDate}',
            format="MM-dd-yyyy"))

    # 61. Compare '{ExpectedToDate}' with '{ActualToDate}'
    step_output = driver.addons().execute(
        CompareDates.comparedates(
            dateOne=f'{ExpectedToDate}',
            dateTwo=f'{ActualToDate}',
            format="MM-dd-yyyy"))

    # 62. Compares '{ExpectedItem}' with '{ActualItem}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedItem}',
            secondString=f'{ActualItem}',
            ignoreCase=False,
            expectedResult=0))

    # 63. Compares '{ExpectedCompany}' with '{ActualCompany}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCompany}',
            secondString=f'{ActualCompany}',
            ignoreCase=False,
            expectedResult=0))

    # 64. Does 'Submitted1' contain 'Submitted'?
    submitted1 = driver.find_element(By.XPATH,
                                     "//span/span[. = 'Submitted']")
    step_output = submitted1.text
    assert step_output and ("Submitted" in step_output)

    # 65. Click 'Create Sales Order'
    create_sales_order = driver.find_element(By.XPATH,
                                             "//button[. = 'Create Sales Order']")
    create_sales_order.click()

    # 66. Get text from 'GetCust'
    # Get Customer from Sales Order Doctype
    getcust = driver.find_element(By.XPATH,
                                  "//div[3]/div/div[1]/form/div[3]//input")
    step_output = getcust.get_attribute("value")
    ActualCustonSalesOrderPage = step_output

    # 67. Get text from 'Getcomp'
    # Get company from sales order doctype
    getcomp = driver.find_element(By.XPATH,
                                  "//div[3]/div/div[2]/form/div[2]//input")
    step_output = getcomp.get_attribute("value")
    ActualCompOnSalesOrder = step_output

    # 68. Get text from 'Getitem1'
    # Get Item from sale order doctype
    getitem1 = driver.find_element(By.XPATH,
                                   "//div[2]/div/div[2]/div[2]/div[1]/div/div/div[2]")
    step_output = getitem1.get_attribute("value")
    ActualItemOnSalesOrder = step_output

    # 69. Get text from 'getitemQty'
    # Get Item Qty from sales order doctype
    getitemqty = driver.find_element(By.XPATH,
                                     "//div[2]/div/div[2]/div[2]/div//div[3]")
    step_output = getitemqty.get_attribute("value")
    ActualItemQtyOnSalesOrder = step_output

    # 70. Get text from 'Getrate'
    # Get Item Rate from sales order doctype
    getrate = driver.find_element(By.XPATH,
                                  "//div[2]/div/div[2]/div[2]/div//div[4]")
    step_output = getrate.get_attribute("value")
    ActualItemRateOnSalesOrder = step_output

    # 71. Click 'INPUT118'
    input118 = driver.find_element(By.XPATH,
                                   "//div[4]/div/div[2]/div/input")
    input118.click()

    # 72. Positive values for future and negative for past dates
    step_output = driver.addons().execute(
        GenerateDateTimeCurrentFutureOrPast.futurepastaction(
            days=12,
            months=0,
            years=0,
            hours=0,
            minutes=0,
            format="dd"))
    ExpectedDeliDate_day = step_output

    # 73. Click '308'
    _308 = driver.find_element(By.XPATH,
                               f'//div[4]/div[1]/div/div/div[. = {ExpectedDeliDate_day}]')
    _308.click()

    # 74. Does 'New Sales Order 1' contain 'New Sales Order 1'?
    new_sales_order_1 = driver.find_element(By.XPATH,
                                            "//div[. = 'New Sales Order 1']")
    step_output = new_sales_order_1.text
    assert step_output and ("New Sales Order 1" in step_output)

    # 75. Does 'Not Saved3' contain 'Not Saved'?
    not_saved3 = driver.find_element(By.XPATH,
                                     "//span/span[. = 'Not Saved']")
    step_output = not_saved3.text
    assert step_output and ("Not Saved" in step_output)

    # 76. Click 'Save20'
    save20 = driver.find_element(By.XPATH,
                                 "//span[. = 'Save']")
    save20.click()

    # 77. Click 'Close7'
    close7 = driver.find_element(By.XPATH,
                                 "//span[. = 'Close']")
    close7.click()

    # 78. Get text from 'ABHISHEK JHA2'
    abhishek_jha2 = driver.find_element(By.XPATH,
                                        "//h1//div[. = 'ABHISHEK JHA']")
    step_output = abhishek_jha2.get_attribute("value")
    ActualTitleOnSalesOrderSave = step_output

    # 79. Does 'Draft2' contain 'Draft'?
    draft2 = driver.find_element(By.XPATH,
                                 "//span/span[. = 'Draft']")
    step_output = draft2.text
    assert step_output and ("Draft" in step_output)

    # 80. Compares '{ExpectedCustomerName}' with '{ActualCustonSalesOrderPage}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustomerName}',
            secondString=f'{ActualCustonSalesOrderPage}',
            ignoreCase=False,
            expectedResult=0))

    # 81. Compares '{ExpectedCompany}' with '{ActualCompOnSalesOrder}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCompany}',
            secondString=f'{ActualCompOnSalesOrder}',
            ignoreCase=False,
            expectedResult=0))

    # 82. Compares '{ExpectedItem}' with '{ActualItemOnSalesOrder}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedItem}',
            secondString=f'{ActualItemOnSalesOrder}',
            ignoreCase=bool(strtobool(true)),
            expectedResult=-1))

    # 83. Compares '{ExpectedItemQty}' with '{ActualItemQtyOnSalesOrder}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedItemQty}',
            secondString=f'{ActualItemQtyOnSalesOrder}',
            ignoreCase=bool(strtobool(true)),
            expectedResult=-1))

    # 84. Compares '{ExpectedItemRate}' with '{ActualItemRateOnSalesOrder}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedItemRate}',
            secondString=f'{ActualItemRateOnSalesOrder}',
            ignoreCase=bool(strtobool(true)),
            expectedResult=-1))

    # 85. Compares '{ExpectedCustomerName}' with '{ActualTitleOnSalesOrderSave}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCustomerName}',
            secondString=f'{ActualTitleOnSalesOrderSave}',
            ignoreCase=False,
            expectedResult=0))

    # 86. Click 'Submit11'
    submit11 = driver.find_element(By.XPATH,
                                   "//div[5]//span[. = 'Submit']")
    submit11.click()

    # 87. Click 'Yes4'
    yes4 = driver.find_element(By.XPATH,
                               "//div[2]/div/div//button[. = 'Yes']")
    yes4.click()

    # 88. Click 'Close11'
    close11 = driver.find_element(By.XPATH,
                                  "//span[. = 'Close']")
    close11.click()

    # 89. Does 'Sales Order has been submitted succes...123' contain '[NONE]'?
    sales_order_has_been_submitted_succes_123 = driver.find_element(By.XPATH,
                                                                    "//div[. = 'Sales Order has been submitted successfully']")
    step_output = sales_order_has_been_submitted_succes_123.text
    assert step_output and ("" in step_output)

    # 90. Does 'To Deliver and Bill' contain 'To Deliver and Bill'?
    to_deliver_and_bill = driver.find_element(By.XPATH,
                                              "//span/span[. = 'To Deliver and Bill']")
    step_output = to_deliver_and_bill.text
    assert step_output and ("To Deliver and Bill" in step_output)

    # 91. Logout from the application
    test_logout.test_main(driver)
