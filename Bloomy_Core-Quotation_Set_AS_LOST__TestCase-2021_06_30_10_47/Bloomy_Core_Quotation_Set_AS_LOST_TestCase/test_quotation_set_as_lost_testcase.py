from addons.generate_date_time_current_future_or_past_ import GenerateDateTimeCurrentFutureOrPast
from addons.string_utils import StringUtils
from distutils.util import strtobool
from selenium.webdriver.common.by import By
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
from subtests import test_login
from subtests import test_logout
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: Bloomy_Core
    Package: TestProject.Generated.Tests.BloomyCore
    Test: Quotation(Set AS LOST)_TestCase
    Generated by: Meenal Kardale (meenal.kardale@extrapreneurs-india.com)
    Generated on 06/30/2021, 10:47:57
"""


@pytest.fixture()
def driver():
    driver = webdriver.Chrome(token="3J0RNM_48lLt_KM5Ab6s6A_HZzddmktVs_HhX77AjTM",
                              project_name="Bloomy_Core",
                              job_name="Quotation(Set AS LOST)_TestCase")
    step_settings = StepSettings(timeout=15000,
                                 sleep_time=500,
                                 sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    """1. Go to the Quotation doctype( Desk>> Selling >> quotation) or Type quotation list in search bar.

    2. Open Quotation and submit3.Click on Set as Lost4. pop up window will get displayed5. Select Lost reason and submit6. Verify Status (Status should be Lost).
    """
    # Test Parameters
    # Auto generated application URL parameter
    ApplicationURL = "https://epitest-demo.bloomstack.io/"
    actualStatus = ""
    username = ""
    pwd = ""
    daydelidate = ""

    # 1. Navigate to '{ApplicationURL}'
    # Navigates the specified URL (Auto-generated)
    driver.get(f'{ApplicationURL}')

    # 2. Login to the Application
    test_login.test_main(driver)

    # 3. Click 'Search or type a command (Ctrl + G)'
    search_or_type_a_command_ctrl_g_ = driver.find_element(By.CSS_SELECTOR,
                                                           "#navbar-search")
    search_or_type_a_command_ctrl_g_.click()

    # 4. Type 'quotation l' in 'Search or type a command (Ctrl + G)'
    search_or_type_a_command_ctrl_g_ = driver.find_element(By.CSS_SELECTOR,
                                                           "#navbar-search")
    search_or_type_a_command_ctrl_g_.send_keys("quotation l")

    # 5. Click 'Quotation List'
    quotation_list = driver.find_element(By.XPATH,
                                         "//li[. = 'Quotation List']")
    quotation_list.click()

    # 6. Does 'Quotation6' contain 'Quotation'?
    quotation6 = driver.find_element(By.XPATH,
                                     "//div[. = 'Quotation']")
    step_output = quotation6.text
    assert step_output and ("Quotation" in step_output)

    # 7. Click 'New4'
    new4 = driver.find_element(By.XPATH,
                               "//button[. = 'New']")
    new4.click()

    # 8. Click 'INPUT62'
    input62 = driver.find_element(By.XPATH,
                                  "//div[1]/form/div[4]//input")
    input62.click()

    # 9. Type 'test' in 'INPUT62'
    input62 = driver.find_element(By.XPATH,
                                  "//div[1]/form/div[4]//input")
    input62.send_keys("test")

    # 10. Click 'LI8'
    li8 = driver.find_element(By.XPATH,
                              "//div[4]/div/div[2]/div[1]/div/div/ul/li[1]")
    li8.click()

    # 11. Click 'INPUT63'
    input63 = driver.find_element(By.XPATH,
                                  "//div[2]/form/div[2]/div/div[2]/div[1]/div//input")
    input63.click()

    # 12. Type 'vap' in 'INPUT63'
    input63 = driver.find_element(By.XPATH,
                                  "//div[2]/form/div[2]/div/div[2]/div[1]/div//input")
    input63.send_keys("vap")

    # 13. Click 'VapeCo2'
    vapeco2 = driver.find_element(By.XPATH,
                                  "//li[. = 'VapeCo']")
    vapeco2.click()

    # 14. Click 'INPUT60'
    input60 = driver.find_element(By.XPATH,
                                  "//div[4]/div/div[2]/div/input")
    input60.click()

    # 15. Positive values for future and negative for past dates
    step_output = driver.addons().execute(
        GenerateDateTimeCurrentFutureOrPast.futurepastaction(
            days=6,
            months=0,
            years=0,
            hours=0,
            minutes=0,
            format="dd"))
    daydelidate = step_output

    # 16. Click '301'
    _301 = driver.find_element(By.XPATH,
                               f'//div[3]//div[. = {daydelidate}]')
    _301.click()

    # 17. Click 'Add Row9'
    add_row9 = driver.find_element(By.XPATH,
                                   "//div[6]//button[. = '\n\t\t\t\t\t\t\tAdd Row']")
    add_row9.click()

    # 18. Click 'DIV33'
    div33 = driver.find_element(By.XPATH,
                                "//form/div/div/div[2]/div[2]/div[1]/div/div/div[2]")
    div33.click()

    # 19. Type '[NONE]' in 'Item Code'
    item_code = driver.find_element(By.XPATH,
                                    "//input[@placeholder = 'Item Code']")
    item_code.send_keys(" ")

    # 20. Click 'P10'
    p10 = driver.find_element(By.XPATH,
                              "//div[1]/div/div/div/ul/li[1]/a/p")
    p10.click()

    # 21. Does 'Not Saved2' contain 'Not Saved'?
    not_saved2 = driver.find_element(By.XPATH,
                                     "//span/span[. = 'Not Saved']")
    step_output = not_saved2.text
    assert step_output and ("Not Saved" in step_output)

    # 22. Click 'clicksabutton'
    clicksabutton = driver.find_element(By.XPATH,
                                        "//button[. = 'Save']")
    clicksabutton.click()

    # 23. Click 'Close7'
    close7 = driver.find_element(By.XPATH,
                                 "//span[. = 'Close']")
    close7.click()

    # 24. Does 'Draft' contain 'Draft'?
    draft = driver.find_element(By.XPATH,
                                "//span/span[. = 'Draft']")
    step_output = draft.text
    assert step_output and ("Draft" in step_output)

    # 25. Click 'Submit8'
    submit8 = driver.find_element(By.XPATH,
                                  "//button[. = 'Submit']")
    submit8.click()

    # 26. Click 'Yes1'
    yes1 = driver.find_element(By.XPATH,
                               "//button[. = 'Yes']")
    yes1.click()

    # 27. Click 'Close11'
    close11 = driver.find_element(By.XPATH,
                                  "//span[. = 'Close']")
    close11.click()

    # 28. Does 'Open1' contain 'Open'?
    open1 = driver.find_element(By.XPATH,
                                "//span/span[. = 'Open']")
    step_output = open1.text
    assert step_output and ("Open" in step_output)

    # 29. Click 'Set as Lost'
    set_as_lost = driver.find_element(By.XPATH,
                                      "//button[. = 'Set as Lost']")
    set_as_lost.click()

    # 30. Click 'DIV34'
    div34 = driver.find_element(By.XPATH,
                                "//div[2]/div[1]/div/div[2]/div/div/div/form/div[1]/div/div[2]/div/div")
    div34.click()

    # 31. Click 'INPUT110'
    input110 = driver.find_element(By.XPATH,
                                   "//div[2]/div[1]/div/div[2]/div/div/div/form//input")
    input110.click()

    # 32. Type 'Te' in 'INPUT110'
    input110 = driver.find_element(By.XPATH,
                                   "//div[2]/div[1]/div/div[2]/div/div/div/form//input")
    input110.send_keys("Te")

    # 33. Click 'test'
    test = driver.find_element(By.XPATH,
                               "//li[. = 'test']")
    test.click()

    # 34. Click 'TEXTAREA2'
    textarea2 = driver.find_element(By.XPATH,
                                    "//div[2]/div/div[2]/div/textarea")
    textarea2.click()

    # 35. Type 'Testing Purpose' in 'TEXTAREA2'
    textarea2 = driver.find_element(By.XPATH,
                                    "//div[2]/div/div[2]/div/textarea")
    textarea2.send_keys("Testing Purpose")

    # 36. Click 'Declare Lost'
    declare_lost = driver.find_element(By.XPATH,
                                       "//button[. = 'Declare Lost']")
    declare_lost.click()

    # 37. Does 'Lost' contain 'Lost'?
    lost = driver.find_element(By.XPATH,
                               "//span/span[. = 'Lost']")
    step_output = lost.text
    assert step_output and ("Lost" in step_output)

    # 38. Get text from 'Lost'
    lost = driver.find_element(By.XPATH,
                               "//span/span[. = 'Lost']")
    step_output = lost.get_attribute("value")
    actualStatus = step_output

    # 39. Compares 'Lost' with '{actualStatus}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString="Lost",
            secondString=f'{actualStatus}',
            ignoreCase=False,
            expectedResult=0))

    # 40. Logout from the application
    test_logout.test_main(driver)
