from addons.compare_dates import CompareDates
from addons.generate_date_time_current_future_or_past_ import GenerateDateTimeCurrentFutureOrPast
from addons.string_utils import StringUtils
from distutils.util import strtobool
from selenium.webdriver.common.by import By
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
from subtests import test_login
from subtests import test_logout
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: Bloomy_Core
    Package: TestProject.Generated.Tests.BloomyCore
    Test: QuotationToSalesOrder_TestCase
    Generated by: Meenal Kardale (meenal.kardale@extrapreneurs-india.com)
    Generated on 06/30/2021, 10:49:28
"""


@pytest.fixture()
def driver():
    driver = webdriver.Chrome(token="3J0RNM_48lLt_KM5Ab6s6A_HZzddmktVs_HhX77AjTM",
                              project_name="Bloomy_Core",
                              job_name="QuotationToSalesOrder_TestCase")
    step_settings = StepSettings(timeout=15000,
                                 sleep_time=500,
                                 sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    """1. Go to the Quotation doctype( Desk>> Selling >> quotation) or Type quotation list in search bar.

    2. Open Quotation.3. Hit on create Button in the top Right and click on Sales order.   It will redirect to the sales order doctype.4. Customer , company, Date and Order type will be fetch from Quotation.5. Select Expected Delivery Date.6. Item Detail will be fetch from Quotation.7. Save and Submit.
    """
    # Test Parameters
    # Auto generated application URL parameter
    ApplicationURL = "https://epitest-demo.bloomstack.io/"
    ExpectedCust = ""
    ActualCustNameOnScreen = ""
    ExpectedCompany = ""
    ActtualCustOnSave = ""
    username = "testautomationuser@bloomstack.com"
    pwd = "epi@123"
    RandomDate = ""
    ActualCustOnSalesOrder = ""
    ExpectedDeliDate = ""
    ActualComp = ""
    ActualDT = ""

    # 1. Navigate to '{ApplicationURL}'
    # Navigates the specified URL (Auto-generated)
    driver.get(f'{ApplicationURL}')

    # 2. Login to the Application
    test_login.test_main(driver)

    # 3. Click 'Search or type a command (Ctrl + G)'
    search_or_type_a_command_ctrl_g_ = driver.find_element(By.CSS_SELECTOR,
                                                           "#navbar-search")
    search_or_type_a_command_ctrl_g_.click()

    # 4. Type 'quotat' in 'Search or type a command (Ctrl + G)'
    search_or_type_a_command_ctrl_g_ = driver.find_element(By.CSS_SELECTOR,
                                                           "#navbar-search")
    search_or_type_a_command_ctrl_g_.send_keys("quotat")

    # 5. Click 'Quotation List'
    quotation_list = driver.find_element(By.XPATH,
                                         "//li[. = 'Quotation List']")
    quotation_list.click()

    # 6. Does 'Quotation6' contain 'Quotation'?
    quotation6 = driver.find_element(By.XPATH,
                                     "//div[. = 'Quotation']")
    step_output = quotation6.text
    assert step_output and ("Quotation" in step_output)

    # 7. Click 'New4'
    new4 = driver.find_element(By.XPATH,
                               "//button[. = 'New']")
    new4.click()

    # 8. Click 'INPUT62'
    input62 = driver.find_element(By.XPATH,
                                  "//div[1]/form/div[4]//input")
    input62.click()

    # 9. Type '2018' in 'INPUT62'
    input62 = driver.find_element(By.XPATH,
                                  "//div[1]/form/div[4]//input")
    input62.send_keys("2018")

    # 10. Click 'LI8'
    li8 = driver.find_element(By.XPATH,
                              "//div[4]/div/div[2]/div[1]/div/div/ul/li[1]")
    li8.click()

    # 11. Get text from 'INPUT62'
    input62 = driver.find_element(By.XPATH,
                                  "//div[1]/form/div[4]//input")
    step_output = input62.get_attribute("value")
    ExpectedCust = step_output

    # 12. Get text from 'custnmactual'
    custnmactual = driver.find_element(By.XPATH,
                                       "//div[3]/div/div[1]/form/div[5]/div/div/div[2]")
    step_output = custnmactual.get_attribute("value")
    ActualCustNameOnScreen = step_output

    # 13. Compares '{ExpectedCust}' with '{ActualCustNameOnScreen}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCust}',
            secondString=f'{ActualCustNameOnScreen}',
            ignoreCase=False,
            expectedResult=0))

    # 14. Click 'INPUT63'
    input63 = driver.find_element(By.XPATH,
                                  "//div[2]/form/div[2]/div/div[2]/div[1]/div//input")
    input63.click()

    # 15. Type 'vap' in 'INPUT63'
    input63 = driver.find_element(By.XPATH,
                                  "//div[2]/form/div[2]/div/div[2]/div[1]/div//input")
    input63.send_keys("vap")

    # 16. Click 'VapeCo2'
    vapeco2 = driver.find_element(By.XPATH,
                                  "//li[. = 'VapeCo']")
    vapeco2.click()

    # 17. Get text from 'INPUT63'
    input63 = driver.find_element(By.XPATH,
                                  "//div[2]/form/div[2]/div/div[2]/div[1]/div//input")
    step_output = input63.get_attribute("value")
    ExpectedCompany = step_output

    # 18. Click 'input7868'
    input7868 = driver.find_element(By.XPATH,
                                    "//div[4]/div/div[2]/div/input")
    input7868.click()

    # 19. Positive values for future and negative for past dates
    step_output = driver.addons().execute(
        GenerateDateTimeCurrentFutureOrPast.futurepastaction(
            days=3,
            months=0,
            years=0,
            hours=0,
            minutes=0,
            format="dd"))
    RandomDate = step_output

    # 20. Click '3016'
    _3016 = driver.find_element(By.XPATH,
                                f'//div[3]//div[. = {RandomDate}]')
    _3016.click()

    # 21. Click 'Add Row9'
    add_row9 = driver.find_element(By.XPATH,
                                   "//div[6]//button[. = '\n\t\t\t\t\t\t\tAdd Row']")
    add_row9.click()

    # 22. Click 'DIV33'
    div33 = driver.find_element(By.XPATH,
                                "//form/div/div/div[2]/div[2]/div[1]/div/div/div[2]")
    div33.click()

    # 23. Get text from 'inputdate'
    inputdate = driver.find_element(By.XPATH,
                                    "//div[4]/div/div[2]/div/input")
    step_output = inputdate.get_attribute("value")
    ExpectedDeliDate = step_output

    # 24. Type '[NONE]' in 'item code123'
    item_code123 = driver.find_element(By.XPATH,
                                       "//input[@placeholder = 'Item Code']")
    item_code123.send_keys(" ")

    # 25. Click 'P10'
    p10 = driver.find_element(By.XPATH,
                              "//div[1]/div/div/div/ul/li[1]/a/p")
    p10.click()

    # 26. Does 'New Quotation 1' contain 'New Quotation 1'?
    new_quotation_1 = driver.find_element(By.XPATH,
                                          "//div[. = 'New Quotation 1']")
    step_output = new_quotation_1.text
    assert step_output and ("New Quotation 1" in step_output)

    # 27. Does 'status1' contain 'Not Saved'?
    status1 = driver.find_element(By.XPATH,
                                  "//span/span[. = 'Not Saved']")
    step_output = status1.text
    assert step_output and ("Not Saved" in step_output)

    # 28. Click 'Save24'
    save24 = driver.find_element(By.XPATH,
                                 "//span[. = 'Save']")
    save24.click()

    # 29. Click 'Close'
    close = driver.find_element(By.XPATH,
                                "//button[. = '\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t']")
    close.click()

    # 30. Get text from '2018HMO LLC4'
    _2018hmo_llc4 = driver.find_element(By.XPATH,
                                        "//h1//div[. = '2018HMO LLC']")
    step_output = _2018hmo_llc4.get_attribute("value")
    ActtualCustOnSave = step_output

    # 31. Compares '{ExpectedCust}' with '{ActtualCustOnSave}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCust}',
            secondString=f'{ActtualCustOnSave}',
            ignoreCase=False,
            expectedResult=0))

    # 32. Does 'Draft' contain 'Draft'?
    draft = driver.find_element(By.XPATH,
                                "//span/span[. = 'Draft']")
    step_output = draft.text
    assert step_output and ("Draft" in step_output)

    # 33. Click 'Submit8'
    submit8 = driver.find_element(By.XPATH,
                                  "//button[. = 'Submit']")
    submit8.click()

    # 34. Click 'Yes1'
    yes1 = driver.find_element(By.XPATH,
                               "//button[. = 'Yes']")
    yes1.click()

    # 35. Click 'Close8'
    close8 = driver.find_element(By.XPATH,
                                 "//button[. = '\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t']")
    close8.click()

    # 36. Does 'Open1' contain 'Open'?
    open1 = driver.find_element(By.XPATH,
                                "//span/span[. = 'Open']")
    step_output = open1.text
    assert step_output and ("Open" in step_output)

    # 37. Click 'Create'
    create = driver.find_element(By.XPATH,
                                 "//button[. = '\t\t\t\tCreate ']")
    create.click()

    # 38. Click 'Sales Order1'
    sales_order1 = driver.find_element(By.XPATH,
                                       "//li[2]/a[. = 'Sales Order']")
    sales_order1.click()

    # 39. Does 'New Sales Order 11' contain 'New Sales Order 1'?
    new_sales_order_11 = driver.find_element(By.XPATH,
                                             "//div[. = 'New Sales Order 1']")
    step_output = new_sales_order_11.text
    assert step_output and ("New Sales Order 1" in step_output)

    # 40. Does 'Not Saved4' contain 'Not Saved'?
    not_saved4 = driver.find_element(By.XPATH,
                                     "//span/span[. = 'Not Saved']")
    step_output = not_saved4.text
    assert step_output and ("Not Saved" in step_output)

    # 41. Get text from 'salsordercust'
    salsordercust = driver.find_element(By.XPATH,
                                        "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[1]/form/div[3]//input")
    step_output = salsordercust.get_attribute("value")
    ActualCustOnSalesOrder = step_output

    # 42. Get text from 'txtcomp'
    txtcomp = driver.find_element(By.XPATH,
                                  "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[2]//input")
    step_output = txtcomp.get_attribute("value")
    ActualComp = step_output

    # 43. Get text from 'dt'
    dt = driver.find_element(By.XPATH,
                             "//div[4]/div[2]/div[2]/div/div[3]/div[2]/div[1]/div[3]/div/div/div[2]/div[3]/div/div[2]/form/div[4]//input")
    step_output = dt.get_attribute("value")
    ActualDT = step_output

    # 44. Compares '{ExpectedCust}' with '{ActualCustOnSalesOrder}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCust}',
            secondString=f'{ActualCustOnSalesOrder}',
            ignoreCase=False,
            expectedResult=0))

    # 45. Compares '{ExpectedCompany}' with '{ActualComp}'
    step_output = driver.addons().execute(
        StringUtils.comparetwostrings(
            firstString=f'{ExpectedCompany}',
            secondString=f'{ActualComp}',
            ignoreCase=False,
            expectedResult=0))

    # 46. Compare '{ExpectedDeliDate}' with '{ActualDT}'
    step_output = driver.addons().execute(
        CompareDates.comparedates(
            dateOne=f'{ExpectedDeliDate}',
            dateTwo=f'{ActualDT}',
            format="MM-dd-yyyy"))

    # 47. Click 'SPAN162'
    # Click SPAN16 span
    span162 = driver.find_element(By.XPATH,
                                  "//div[2]/div/div[2]/div[2]/div[1]/div/div/div[6]//span")
    span162.click()

    # 48. Click 'INPUT1285'
    # Click INPUT128 Textbox
    input1285 = driver.find_element(By.XPATH,
                                    "//div[1]/div/div[2]/form/div[1]//input")
    input1285.click()

    # 49. Click 'DIV451'
    # Click DIV45 Div
    div451 = driver.find_element(By.XPATH,
                                 "//body/div[1]/div/div[5]/div")
    div451.click()

    # 50. Click 'clicksabutton'
    clicksabutton = driver.find_element(By.XPATH,
                                        "//button[. = 'Save']")
    clicksabutton.click()

    # 51. Click 'Close71'
    # Click Close7 span
    close71 = driver.find_element(By.XPATH,
                                  "//span[. = 'Close']")
    close71.click()

    # 52. Click 'Submit121'
    # Click Submit12 span
    submit121 = driver.find_element(By.XPATH,
                                    "//button/span[. = 'Submit']")
    submit121.click()

    # 53. Click 'Yes11'
    # Click Yes1 Button
    yes11 = driver.find_element(By.XPATH,
                                "//button[. = 'Yes']")
    yes11.click()

    # 54. Click 'Close89'
    # Click Close8 Button
    close89 = driver.find_element(By.XPATH,
                                  "//button[. = '\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t']")
    close89.click()

    # 55. Does 'Sales Order has been submitted succes...312' contain '[NONE]'?
    # Does Sales Order has been submitted succes...3 Div contain "
    sales_order_has_been_submitted_succes_312 = driver.find_element(By.XPATH,
                                                                    "//div[. = 'Sales Order has been submitted successfully']")
    step_output = sales_order_has_been_submitted_succes_312.text
    assert step_output and ("" in step_output)

    # 56. Logout from the application
    test_logout.test_main(driver)
